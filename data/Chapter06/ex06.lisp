#| =============================================================
問題: use-let

・次の条件を満たす関数を定義してください。
　・letを使い、xに10を束縛してください。
　・format関数を用いて、"x is 10"と文字列で返すようにしてください。
　・format関数では~Aを用いて、文字列にxの値10を埋め込んでください。
　・関数名は、use-letとしてください。

(use-let) ; => "x is 10"
================================================================ |#

(defun use-let()
 ;ここにコードを書いてください

)



#| =============================================================
問題: use-let*

・次の条件を満たす関数を定義してください。
　・引数を1つとります。引数名はargとしてください。
　・let*を使い、xに引数argの数値を束縛してください。
　・yにxの値に1を足した値を束縛してください。
　・format関数を用いて、"x + y = *計算結果*"と文字列で返すようにしてください。
　・ここでの*計算結果*は、引数の値によってかわります。
　・関数名は、use-let*としてください。

(use-let* 9)  ; => "9 + 10 = 19"
(use-let* 18)  ; => "18 + 19 = 27"
================================================================ |#

(defun use-let*(arg)
 ;ここにコードを書いてください

)



#| =============================================================
補足: defvarについて

○ 目的：グローバル変数を作ること

○ 初期化: 再度、defvarで初期化はできません
(defvar *a* 1)
(print *a*)      ;=> 1
(defvar *a* 2) ;=> *a*は1のままです
(print *a*) ;=> 1

○ 再設定: setfで可能です
(setf *a* 3)　;=> *a*は３になります
(print *a*) ;=> 3

○ let中ではグローバルのものとは区別されます
(let ((*a* 10))
　 (print *a*)) ; ローカルに再設定可能
(print *a*)
================================================================ |#


#| =============================================================
補足: defparameterについて

○ 初期化: defvarと違い、再度、defparameterで初期化できます。
(defparameter *b* 1)
(print *b*)
(defparameter *b* 2) ;=> *b*は2になります
(print *b*)

○ 再設定: setfでも可能です
(setf *b* 3)　;=> *b*は３になります
(print *b*) ;=> 3

(let ((*b* 10)) ; ローカルに再設定可能
  (print *b*))
(print *b*)
================================================================ |#


#| =============================================================
問題: *single-clozure*

・次の条件を満たすクロージャー変数を作成してください。
　・クロージャー内に、countというシンボルを作ってください。
　・funcallでクロージャー変数を呼び出すと、countが1ずつ増えるようにしてください。
　・クロージャー変数の名前は、*single-clozure*としてください。

(funcall *single-clozure*) ;=> 1
(funcall *single-clozure*) ;=> 2
(funcall *single-clozure*) ;=> 3
================================================================ |#

(defparameter *single-clozure*
 ;ここにコードを書いてください

)



#| =============================================================
問題: *multiple-closure*

　・クロージャー内に、countというシンボルを作ってください。
　・(funcall (first *multiple-clozure*))とすると、countが1つ増えて、
　・(funcall (second *multiple-clozure*))とすると、countが1つ減るようにしてください。
　・クロージャー変数の名前は、*multiple-clozure*としてください。

(funcall (first *multiple-clozure*)) ;=> 1
(funcall (first *multiple-clozure*)) ;=> 2
(funcall (first *multiple-clozure*)) ;=> 3
(funcall (second *multiple-clozure*)) ;=> 2
(funcall (second *multiple-clozure*)) ;=> 1
(funcall (second *multiple-clozure*)) ;=> 0
================================================================ |#

(defparameter *multiple-clozure*
 ;ここにコードを書いてください

)

