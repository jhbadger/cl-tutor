;; Japanese version
#| =============================================================
問題: add1

・引数に1つとり、引数に1を加えてた値を返す関数を定義してください。
・関数名はadd1、引数はxとしてください。
　(add1 9) => 10
================================================================ |#

(defun add1()
  ;; ここにコードを書いてください 

)



#| =============================================================
問題: add2

・引数を2つとり、2つの引数を足した値を返す関数を定義してください。
・関数名はadd2、引数はxとyとしてください。
　(add2 9 10) => 19
================================================================ |#

(defun add2()
  ;; ここにコードを書いてください 
  
)



#| =============================================================
問題: princ-check

・princ関数を使い、REPLに"Hello"と表示させる関数を書いてください。
・関数名はprinc-checkとしてください。
================================================================ |#

(defun princ-check()
  ;; ここにコードを書いてください 

)	



#| =============================================================
問題: power

・2つの引数（xとy）をとり、xをy乗した返す関数を定義してください。
・関数名はpower、引数はxとyとしてください。
　(power 2 4) => 16 ; 2の4乗(2*2*2*2 = 16)
================================================================ |#

(defun power()
  ;; ここにコードを書いてください 
  
)



#| =============================================================
補足: 高階関数(High-order function)

・高階関数は、引数として関数をとる関数です。

・funcall,　apply, reduceの3つの違いを確認しましょう。
　3つの関数と、引数の関係を比較すると次のようになります。
　(funcall 関数 引数1 引数2　引数3 引数4...)
　(apply 関数 引数1　'(引数2) )
　(reduce 関数　'(引数1 引数2　引数3 引数4...) )

・funcallは、関数に、引数を1つずつ適応させて、結果を返します。
　(funcall #'append '(1 2) '(3 4) '(5 6)  ) ;=> (1 2 3 4 5 6)

・applyは、funcallと同様に、引数を関数に渡しますが、2つ目の引数がリストでなければいけません。
　(apply #'append '(1 2) '( (3 4) (5 6) ) ) ;=> (1 2 3 4 5 6)

・reduceは、リストの中の要素を1つずつ関数に渡して、まとめた値を返します。
　(reduce #'append '( (1 2) (3 4) (5 6)))  ;=> (1 2 3 4 5 6)
　(reduce #'+ '(1 2 3 4))  ;=> 10 

・実際に、コードを評価しながら、動作の違いを確認してください。
　(funcall #'append '(1 2) '(3 4) '(5 6)  ) 
　(apply  #'append '(1 2) '( (3 4) (5 6) ) )
　(reduce #'append '( (1 2) (3 4) (5 6)))
================================================================ |#



#| =============================================================
問題: use-funcall

・高階関数funcallを使い、(1 2 3 4 5 6)と返すように、関数を定義してください。
・関数名は、use-funcallとしてください。
================================================================ |#

(defun use-funcall()
  (funcall #'append *ここにリストを書いてください*)
)



#| =============================================================
問題: use-apply

・高階関数applyを使い、(1 2 3 4 5 6)と返すように、関数を定義してください。
・関数名は、use-applyとしてください。
================================================================ |#

(defun use-apply()
  (apply #'append *ここにリストを書いてください*)
)


#| =============================================================
問題: use-reduce

・高階関数reduceを使い、(1 2 3 4 5 6)と返すように、関数を定義してください。
・関数名は、use-reduceとしてください。
================================================================ |#

(defun use-reduce()
  (reduce #'append *ここにリストを書いてください*)
)



#| =============================================================
問題: each1+

・引数のリストのそれぞれの数字に1を足したリストを返す関数を定義してください。
・関数名は、each1+ 引数はlistとしてください。
  (each1+ '(1 2 3))  => (2 3 4)
  (each1+ '(10 11 12))  => (11 12 13)
  (mapcar #'1+ '(1 2 3))  => (2 3 4)
・mapcarを使うと、関数をリストの要素それぞれに適応させられます。
================================================================ |#

(defun each1+(list)
  ;; ここにコードを書いてください
  
)



#| =============================================================
問題: opt-args

・2つのオプショナル引数bとcをとり、bには1、cには2を設定してください。
・関数名は、opt-argsとして、次のような動作をするように、定義してください。
　(opt-args 0) => (0 1 2)
　(opt-args 0 100) => (0 100 2)
　(opt-args 0 100 200) => (0 100 200)
　(opt-args 0 nil 1000) => (0 nil 1000)
================================================================ |#

(defun opt-args()
  ;; ここにコードを書いてください 

) 



#| =============================================================
補足: format

・format関数にnilを指定すると文字列を返します。
　(format nil "Hello")  =>  "Hello"

・format関数の文字列内に~Aとすると、後の評価値を埋め込めます。
　(format nil "I am ~A" "happy") => "I am happy"
================================================================ |#



#| =============================================================
問題: use-format

・format関数を使い、"hello, world"という文字列を返す関数を定義してください。
・関数名は、use-formatとしてください。
================================================================ |#

(defun use-format()
  ;; ここにコードを書いてください 
  
)


#| =============================================================
問題: format-nil

・数字の引数を1つとり、"He is 数字 years old."と文字列を返す関数を定義してください。
・関数名は、format-nil、引数はageとしてください。
　(format-nil 10) => "He is 10 years old." 
================================================================ |#

(defun format-nil()
  ;; ここにコードを書いてください 
  
)



#| =============================================================
補足: read-from-string and eval

・read-from-string関数を使うと、文字列をS式で読み込みます。
　(read-from-string "(+ 1 1)")  => (+ 1 2)

・eval関数を使うと、S式を評価できます。
　(eval '(+ 1 1))  =>  2
================================================================ |#


#| =============================================================
問題: tax

・消費税を計算して、次のように文字列で返す関数を定義してください。
・関数名はtax、引数はpriceとしてください。
  (tax 1000) 
    => "税抜価格は1,000円、税込価格は1,080円です。"
================================================================ |#

(defun tax ()
  ;; ここにコードを書いてください 

)



#| =============================================================
問題: balance

・預金から出費を差し引き、残高を文字列で返す関数を定義してください。
・関数名はbalanceとし、引数はsavingとexpenseとしてください。
  (balance 100000 8900)
    => "預金100,000円で、8,900円の出費がありました。残高は91,100円です。"
================================================================ |#

(defun balance()
  ;; ここにコードを書いてください
  
)



#| =============================================================
問題: staffs

・会社の出勤スタッフを決め、次のように文字列で返す関数を定義してください。
・関数名は、staffsとしてください。
・常駐スタッフは、Hiroki、Mayumi、Masashiの3人です。
・バイトスタッフは、Ichiro、Goro、Saburoの３人です。
・バイトスタッフを指定すると、常駐スタッフと入れ替わるようにしてください。
・オプショナル引数を使ってください。
  (staffs) => "Hiroki、Mayumi、Masashiが出勤予定です"
　(staffs "Ichiro") => "Ichiro、Mayumi、Masashiが出勤予定です。"
　(staffs "Ichiro" "Goro") => "Ichiro、Goro、Masashiが出勤予定です。"
　(staffs "Ichiro" "Goro" "Saburo") => "Ichiro、Goro、Saburoが出勤予定です。"
================================================================ |#

(defun staffs ()
  ;; ここにコードを書いてください 

)



#| =============================================================
問題: belongings

・研修会に必要なものを列挙し、文字列で返す関数を定義してください。
・関数名はbelongingsとして、
・引数には、任意数の文字列をとります。
・レストパラメーターを使ってください。
　(belongings "PC" "実践CL") => "必要なものは、PC 実践CL です。"
================================================================ |#

(defun belongings()
  ;; ここにコードを書いてください 

)



#| =============================================================
問題: login

・ユーザー名とパスワードをキーワードで受け取り、文字列で返す関数を定義してください。
・関数名はloginとして、
・nameとpasswordをキーワードで受け取り、
　nameが"tcool"、かつ、passwordが0101の場合に、
  "login成功"、そうでない場合は、"login失敗"と値を返してください。
   (login :name "tcool" :password 0101) => "login成功"
   (login :name "tcool" :password 0102) => "login失敗"
================================================================ |#

(defun login()
  ;; ここにコードを書いてください
  
  )



#| =============================================================
問題: fizzbuzz

・引数で与えられた値が3の倍数の場合は"Fizz"，5の倍数の場合は"Buzz"，15の倍数の場合は"FizzBuzz"，それ以外の場合はその値自身を返す関数を定義してください．
・関数名はfizzbuzz、引数はnとしてください。
  (fizzbuzz 30)
   => "FizzBuzz"
================================================================ |#

(defun fizzbuzz ()
  ;; ここにコードを書いてください
  
)



#| =============================================================
問題: print-fizzbuzz

・1から引数で与えられた数までの全てのFizzBuzzをスペース区切りで出力する関数を定義してください。
・関数名はprint-fizzbuzz、引数はnとしてください。
  (print-fizzbuzz 15)
   =>  1 2 Fizz 4 Buzz Fizz 7 8 Fizz Buzz 11 Fizz 13 14 FizzBuzz
================================================================ |#

(defun print-fizzbuzz ()
  ;; ここにコードを書いてください
  
)
