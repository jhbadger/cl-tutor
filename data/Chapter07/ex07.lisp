#| =============================================================
問題: my-if

`AND`は引数を順番に評価していき引数が偽になったら、そこで評価を終了しNILを返します。
最後の引数を評価して真になった場合は最後の値を返します。
`OR`は引数を順番に評価していき引数が真になったら、そこで評価を終了し、その値を返します。
最後の引数を評価しても真にならなかった場合はNILを返します。
では、この`AND`と`OR`を使って`IF`と同じ挙動をする`MY-IF`を定義して下さい。
================================================================ |#

(defmacro my-if()

)


#| ============================================================
問題: my-cond

LISPの父であるジョンマッカーシーの論文にある純LISPの仕様には`IF`のかわりに`COND`が含まれていました。
しかし実際に純LISPを実装するときには、実装の単純化のために`COND`よりも`IF`を実装することが多いです。
`COND`のかわりに`IF`を使っても良いことを示すために`MY-COND`を`IF`を使ったマクロで定義して下さい。
=============================================================== |#

(defmacro my-cond()

)



#| =============================================================
問題 my-let

変数の束縛に使われる`LET`は`LAMBDA`を使って定義することが出来ることが知られています。
なお実際に幾つかのLISPの処理系では未だにこの定義が使われています。
`MY-LET`を`LAMBDA`を使ったマクロで定義して下さい。
================================================================ |#

(defmacro my-let()

)



#| =============================================================
問題: my-let*

`LET`で同時に束縛された変数は、その変数の初期化に同じ`LET`で束縛された変数を使うことができません。
そこでCommon Lispには他のプログラミング言語と同様に先に束縛された変数を変数の初期化に
使うことができる`LET*`があります。`MY-LET*`を`LET`を使ったマクロで定義して下さい。
================================================================ |#

(defmacro my-let*()

)



#| =============================================================
問題: my-dotimes

`DO`から始まる名前のマクロは全て`DO`を使ったマクロで定義できます。
`DOTIMES`と同じ挙動をする`MY-DOTIMES`を`DO`を使ったマクロで定義して下さい。
================================================================ |#

(defmacro my-dotimes()

)



#| =============================================================
問題 my-do*

`DO`は`LET`と同様に同時に束縛された変数は、その変数の初期化に同じ`DO`で束縛された変数を
使うことができません。そこでCommon Lispには他のプログラミング言語と同様に
先に束縛された変数を変数の初期化に使うことができる`DO*`があります。
`DO*`と同じ挙動をする`MY-DO*`を`DO`を使ったマクロで定義して下さい。
================================================================ |#

(defmacro my-do*()

)


#| =============================================================
問題: my-when

・whenと同じ働きをするマクロmy-whenを定義してください
・マクロ名はmy-when、引数は(condition &rest body)としてください。

(my-when (oddp (1+ (* 2 (random 10)))) (format nil "2n+1は奇数")) 
  => "2n+1は奇数"
================================================================ |#

(defmacro my-when()

)




#| =============================================================
問題: my-or

・まず、not andを表す以下のnandマクロを次のように定義してください。
　(defmacro nand (&rest rest)
    `(not (and ,@rest)))

・nandマクロのみを用いて、orと同じような働きをするmy-orマクロを定義してください。
・マクロ名はmy-or、引数は(&rest rest)としてください。
・戻り値はTもしくはNILとします。

(my-or t nil)
   => T
================================================================ |#

　(defmacro nand ()
   
)   


(defmacro my-or()

)
