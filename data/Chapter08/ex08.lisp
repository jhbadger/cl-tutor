#| ================================================================
# 問題: my-xor

Common LispにはJavaにおけるApache Commonsのような有名なユーティリティ集として
Alexandriaというものがあります。このAlexandriaには`XOR`を定義するマクロがあります。
これはxorの出現頻度が高いにに比べANSI Common Lispのに含まれなかったため収録されたと
思われます。そして`AND`や`OR`と同様に`XOR`は条件が成立することが確定した時点の値を返します。
`MY-XOR`を定義して下さい。
================================================================ |#

(defmacro my-xor()
  
)



#| ================================================================
# 問題: my-aif

Common Lispで使えるようなマクロを古典的マクロと言います。古典的マクロを使うことで
アナフォリックマクロと呼ばれる特殊なマクロを定義することが出来ます。
なおアナフォリックマクロを集めたライブラリとしてはAnaphoraがあります。
Anaphoraに定義されているマクロ`AIF`は条件式の評価結果をそれぞれの文で
`IT`と言う変数名で参照できます。これと同じ挙動をする`MY-AIF`を定義して下さい。

;; 奇数なら1を加えて偶数にする
(my-aif (oddp 2) (1+ it) it)
================================================================ |#

(defmacro my-aif()
  
)



#| ================================================================
# 問題: my-alambda

関数オブジェクトを生成する特殊形式`LAMBDA`は関数名を持たないため、再帰関数を
定義することができません。これを解決するためのアナフォリックマクロ`ALAMBDA`があります。
これは`ALAMBDA`内で`SELF`を関数名として再帰することを可能にします。
これと同じ挙動をする`MY-ALAMBDA`を定義して下さい。

;; 1からnまでを定義する関数
(my-alambda (n) (if (zerop x n) n (+ n (self (1- n)))))
================================================================ |#

(defmacro my-alambda()
  
)



#| ================================================================
# 問題: my-whichever

Alexandriaには他のプログラミング言語には無いような面白いマクロが定義されています。
その一つに`WHICHEVER`があります。これは与えられた引数の内でランダムにどれか一つを
実行するマクロです。これと同じ挙動をするマクロ`MY-WHICHEVER`を定義してください。

;; :FOOと表示されるか、(1+ 2)を実行するか、"foo"を評価するか
(my-whichever (print :foo) (1+ 2) "foo")
================================================================ |#

(defmacro my-whichever()
  
)



#| ================================================================
## 問題: `MY-PRIME-NUMBERS`
Common LispのマクロはC++のconstexprのような制限がなくI/Oを除く殆どの関数や
マクロを使うことが可能なのでコンパイル時計算が非常に得意です。この性質を利用して
コンパイル時に素数列を求めるマクロ`MY-PRIME-NUMBERS`を定義して下さい。

(my-prime-numbers 10) ;; コンパイル時に(2 3 5 7)に展開される
================================================================ |#

(defmacro my-prime-numbers()
  
)
